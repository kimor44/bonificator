// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(nanoid(11))
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Payment
  stripeCustomerId String?
  plan             UserPlan @default(FREE)

  // Role
  role UserRole @default(USER)

  // Resend email
  resendContactId String?

  // For the Credentials provider
  passwordHash String?

  sessions  Session[]
  accounts  Account[]
  feedbacks Feedback[]
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Season {
  id        String  @id @default(nanoid(11))
  year      String  @unique
  leagues   LeagueSeason[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("seasons")
}

model Country {
  id        String  @id @default(nanoid(11))
  name      String  @unique
  flag      String
  code      String  @unique @db.VarChar(2)
  teams     Team[]
  leagues   League[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("countries")
}

model Team {
  id         String  @id @default(nanoid(11))
  rapidId    String  @unique @map("rapid_id")
  name       String
  countryId  String? @map("country_id")
  country    Country?   @relation(fields: [countryId], references: [id], onDelete: SetNull)
  logo       String?
  standings  Standing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("teams")
}

model League {
  id        String  @id @default(nanoid(11))
  name      String
  type      String
  rapidId   String  @unique
  countryId String? @map("country_id")
  country   Country?   @relation(fields: [countryId], references: [id], onDelete: SetNull)
  seasons   LeagueSeason[]
  logo      String?
  standings Standing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("leagues")
}

model Standing {
  id        String  @id @default(nanoid(11))
  leagueId  String  @map("league_id")
  league    League   @relation(fields: [leagueId], references: [rapidId], onDelete: Cascade)
  rank      Int
  teamId    String  @map("team_id")
  team      Team     @relation(fields: [teamId], references: [rapidId], onDelete: Cascade)
  points    Int
  goalsDiff Int     @map("goals_diff")
  played    Int
  win       Int
  draw      Int
  lose      Int
  for       Int
  against   Int
  form      String? @db.VarChar(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("standings")
}

model LeagueSeason {
  leagueId String
  seasonId String
  league   League  @relation(fields: [leagueId], references: [id])
  season   Season  @relation(fields: [seasonId], references: [id])

  @@id([leagueId, seasonId])
  @@map("league_season")
}

model CallApi {
  id        String  @id @default(nanoid(11))
  count     Int
  createdAt DateTime @default(now())
  @@map("call_apis")
}

enum UserPlan {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}
